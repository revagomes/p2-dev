<?php
/**
 * @file
 * Code for the PECE Access.
 */
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

const REALM_ALL_CAN_VIEW = 'pece_access_all_can_view';
/**
 * Implements hook_node_grants_alter().
 */
function pece_access_node_grants_alter(&$grants, AccountInterface $account, $op) {
  // this code merge role permission with group permission. Exemple, if you add
  // a group and role permission in a content, only group's members with this role
  // can access
  if (key_exists('pbf_role_id', $grants)  && key_exists('pbf_field_pbc_ref_group', $grants)) {
    // for each user's group and user's role need create a new grant to PECE. //21 0 4 -> 2102
    foreach ($grants['pbf_field_pbc_ref_group'] as $userGroup) {
      foreach ($grants['pbf_role_id'] as $roleUser) {
        //add new grants permission for this user
        $grants['pece_role_group'][] = $userGroup . '0' .  $roleUser;
      }
    }
  }
}

/**
 * Implements hook_node_access_records_alter().
 */
function pece_access_node_access_records_alter(&$grants, NodeInterface $node) {
  $grantsGroupRole = [];
  foreach ($grants as $key => $grant) {
    switch ($grant['realm']) {
      case 'pbf_field_pbc_ref_group':
      case 'pbf_role_id':
        $grantsGroupRole[$grant['realm']][] = $grant;
        $grantsGroupRole[$grant['realm']][count($grantsGroupRole[$grant['realm']]) - 1]['key'] = $key;
        break;
    }
  }

  //if content has group permission and role permission only
  if (key_exists('pbf_field_pbc_ref_group', $grantsGroupRole) && key_exists('pbf_role_id', $grantsGroupRole)) {
    foreach ($grantsGroupRole['pbf_field_pbc_ref_group'] as $group) {
      foreach ($grantsGroupRole['pbf_role_id'] as $role) {
        $grants[] = [
          'realm' => 'pece_role_group',
          'gid' => $group['gid'] . '0' . $role['gid'], //103 - 10303
          'grant_view' => $role['grant_view'],
          'grant_update' => $role['grant_update'],
          'grant_delete' => $role['grant_delete'],
          'priority' => $role['priority']
        ];
        unset($grants[$role['key']]);
      }
      unset($grants[$group['key']]);
    }
  }
}

/**
 * Implements hook_access_node_grants().
 * @param \Drupal\Core\Session\AccountInterface $account
 * @param $op
 *
 * @return array
 */
function pece_access_node_grants(AccountInterface $account, $op) {
  if ($op != 'view')
    return;

  $grants = [];
  $grants[REALM_ALL_CAN_VIEW] = [1];
  return $grants;
}
/**
 * Implements hook_node_access_records().
 */
function pece_access_node_access_records(NodeInterface $node) {

  if (!$node->isPublished()) {
    return NULL;
  }

  if(is_null($node->field_pece_all_can_view))
    return [];

  if ($node->field_pece_all_can_view->value) {
    $grant = [
      'realm' => REALM_ALL_CAN_VIEW,
      'gid' => $node->field_pece_all_can_view->value,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];

    return [$grant];
  }


}

// Form alter
/**
 * Implements hook_form_alter().
 */
function pece_access_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_form' && isset($form['field_pece_all_can_view'])) {
    $form['pece_all_can_view'] = [
      '#type' => 'checkbox',
      '#title' => t('All can view'),
      '#default_value' => $form['#node']->field_pece_all_can_view->value,
    ];
  }

  if (key_exists('field_pbc_ref_group', $form)) {
    $widget = $form['field_pbc_ref_group']['widget'];
    foreach ($widget as $key => $item) {
      if (is_numeric($key)) {
        $item['grant_public']['#default_value'] = 0;
        $item['grant_public']['#access'] = FALSE;
        $item['grant_view']['#default_value'] = 1;
        $item['grant_view']['#access'] = TRUE;
        $item['grant_update']['#default_value'] = 0;
        $item['grant_update']['#access'] = TRUE;
        $item['grant_delete']['#default_value'] = 0;
        $item['grant_delete']['#access'] = FALSE;
        $form['field_pbc_ref_group']['widget'][$key] = $item;
      }
    }
  }
  if (key_exists('field_pbc_ref_user', $form)) {
    $widget = $form['field_pbc_ref_user']['widget'];
    foreach ($widget as $key => $item) {
      if (is_numeric($key)) {
        $item['grant_public']['#default_value'] = 0;
        $item['grant_public']['#access'] = FALSE;
        $item['grant_view']['#default_value'] = 1;
        $item['grant_view']['#access'] = TRUE;
        $item['grant_update']['#default_value'] = 0;
        $item['grant_update']['#access'] = TRUE;
        $item['grant_delete']['#default_value'] = 0;
        $item['grant_delete']['#access'] = FALSE;
        $form['field_pbc_ref_user']['widget'][$key] = $item;
      }
    }
  }
  if (key_exists('field_pbc_ref_role', $form)) {
    $widget = $form['field_pbc_ref_role']['widget'];
    foreach ($widget as $key => $item) {
      if (is_numeric($key)) {
        $item['grant_public']['#default_value'] = 0;
        $item['grant_public']['#access'] = FALSE;
        $item['grant_view']['#default_value'] = 1;
        $item['grant_view']['#access'] = TRUE;
        $item['grant_update']['#default_value'] = 0;
        $item['grant_update']['#access'] = TRUE;
        $item['grant_delete']['#default_value'] = 0;
        $item['grant_delete']['#access'] = FALSE;
        $form['field_pbc_ref_role']['widget'][$key] = $item;
      }
    }
  }
}
